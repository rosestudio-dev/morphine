import argparse
from pathlib import Path

parser = argparse.ArgumentParser(prog='Data')
parser.add_argument('-s', '--source', default='')
parser.add_argument('-f', '--files', default='')
parser.add_argument('-p', '--prefix', default='')
parser.add_argument('-n', '--name', default=None)
args = parser.parse_args()

files = args.files.split(":")

if args.name == "":
    print("Empty name", file=sys.stderr)
    exit(1)

file_name = Path(args.name).stem

f = open(args.name + ".h", "w")
f.write("""//
// Generated by data.py
//

#pragma once

#include <stddef.h>
#include <stdint.h>

struct """ + file_name + """_raw_data {
    const char *name;
    const uint8_t *data;
    size_t size;
};

""")

for file in files:
    name = file.removeprefix(args.prefix) \
        .split(".")[0] \
        .replace("/", "_") \
        .replace("\\", "_") \
        .removeprefix("_")

    f.write("extern const uint8_t " + name + "_data[];\n")
    f.write("extern const size_t " + name + "_size;\n")
    f.write("\n")

f.write("extern const struct " + file_name + "_raw_data " + file_name + "_data_table[];\n")

f.close()

f = open(args.name + ".c", "w")
f.write("""//
// Generated by data.py
//

#include <""" + file_name + """.h>

""")

for file in files:
    of = open(args.source + '/' + file, "rb")
    content = of.read()
    of.close()

    hex_content = ""
    for i in content:
        hex_content += hex(i) + ", "

    name = file.removeprefix(args.prefix) \
        .split(".")[0] \
        .replace("/", "_") \
        .replace("\\", "_") \
        .removeprefix("_")

    f.write("const uint8_t " + name + "_data[] = { " + hex_content + " };\n")
    f.write("const size_t " + name + "_size = " + str(len(content)) + ";\n")
    f.write("\n")

f.write("const struct " + file_name + "_raw_data " + file_name + "_data_table[] = {\n")

for file in files:
    varname = file.removeprefix(args.prefix) \
        .split(".")[0] \
        .replace("/", "_") \
        .replace("\\", "_") \
        .removeprefix("_")

    name = file.removeprefix(args.prefix) \
        .split(".")[0] \
        .replace("/", ".") \
        .replace("\\", ".") \
        .removeprefix(".")

    f.write("    { .name = \"" + name + "\", .data = " + varname + "_data, .size = " + varname + "_size },\n")

f.write("    { .name = NULL, .data = NULL, .size = 0 }\n")
f.write("};\n")

f.close()
